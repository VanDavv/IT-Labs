#1 C
#2 A
#3 D
#4 A C D
#5 C - słowo kluczowe throw może być użyte wyłącznie z obiektem klasy Throwable lub klasy po niej dziedziczącej
#6 A
#7 A - sprawdzanie bloków catch następuje sekwencyjnie (od pierwszego do ostatniego).
Wyjątek ArrayIndexOutOfBoundsException, z racji że dziedziczy po Exception, zostanie już przechwycony wcześniej
przez swojego przodka - Exception
public class Test {
    public static void main(String[] args) {
        try {
            int a[] ={1, 2, 3, 4};
            for (int i = 1; i <= 4; i++) {
                System.out.println("a[" + i + "]=" + a[i] + "\n");
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("ArrayIndexOutOfBoundsException");
        } catch (Exception e) {
            System.out.println("error = " + e);
        }
    }
}
#8 B
#9 A
#10 B - składnia instrukcji assert jest inna, powinno być assert x > 0 : "assertion failed"
#11 D - składnia instrukcji assert wymaga, aby treść wiadomości nie była typu void, musi być możiwe wyświetlenie czegoś
w przypadku, gdy asercja okaże sie nieprawdziwa
#12 D
#13 A
#14 B
#15 D Wyjątki unchecked nie są sprawdzane w czasie kompilacji, znaczy to że nie ma wymogu zawsze ich łapać jeśli metoda może je wyrzuca.
#16 C
#17 C D
#18 C E
#19
import static java.lang.System.out;
import java.util.Scanner;
import java.util.NoSuchElementException;

public class Test {
    public static void main(String[] args) {
        try {
            Scanner scn = new Scanner(System.in);
        } catch (NoSuchElementException | IllegalStateException ex) {
            out.println(ex.getMessage());
        } catch (Throwable ex) {
            System.exit(0);
        }
    }
}